TOSTACK addr_box, addr_first, iter_row, iter_pix, i, j, channel, x_f, y_f, next_row_B, max_channel;

*x_f = *y_f = 0;
*next_row_B = 3* *width + *padd;
*box_next_row = 3*(*box + 1) + *padd
*box_ret_to_row = 3* (*width - *box - 1)
*addr_box = *input_buff

while( *y_f != *height )
{	 
	*iter_row = 1;
	if ( *y_f < *box )
		*iter_row += *y_f;
	else
		*iter_row += *box;
	
	if (*y_f < *height-*box)
		*iter_row += *box;
	else	
		*iter_row += *height-*y_f-1;
	
	while(*x_f!=*width)
	{
		addr_curr			=	*addr_box;
		*addr_first			=	addr_curr;
		
		*iter_pxl			=	1;
		if( *x_f < *box )
			*iter_pxl	+=	*x_f;
		else
			*iter_pxl	+=	*box;
		if(*x_f < *width-*box)
			*iter_pxl	+=	*box;
		else
			*iter_pxl	+=	*width-*x_f-1;
	
		for(*i= *iter_row ; *i ; --*i)
		{
			for(*j = *iter_pxl ; *j ; --*j)
			{
				for(*channel=0 ; *channel < 3 ; ++*channel)
				{
					if( *(addr_curr) > *(0*channel_max-4**channel) )
						*(*first_canal_max - 4* *canal) = *(addr_curr);
					*addr_curr+=1;
				}
			}
			*addr_first += *next_row_B;
			addr_curr = *addr_first;
		}
	
		channel0 to reg, reg to [EDI], edi ++ which is destination byte
		channel1 to reg, reg to [EDI], EDI ++
		channel2 ro reg, reg to [EDI], EDI ++ 
	
		mov *channel0 ,  0
		mov *channel0 -4, 0
		mov *channel0 - 8,0
		*x_f += 1;
		if(*x_f > *box)
			*addr_box += 3;
	}
	EDI+=*padd;
	*y_f += 1;
	*x_f = 0;
	
	if(*y_f > *box)
		if( *y_f < *height - *box)
			*addr_box += *box_next_row
		else
			*addr_box -= *box_ret_to_row
	else
		*addr_box -= *box_ret_to_row
}
