section .text

global filter_x86
global _filter_x86

filter_x86:
_filter_x86:
	push	ebp
	mov		ebp,	esp
	;reserve space for all variables
	sub		esp,	68
	;init x_f, y_f
	mov	[EBP-36],	0
	mov	[EBP-40],	0
	;calculate and store next_row_B
	mov		eax,	[EBP+20]
	mul		eax,	3
	add		eax,	[EBP+28]
	mov	[EBP-48],	eax
	;calculate box_next_row
	mov		eax,	[ebp+16]
	add		eax,	1
	mul		eax,	3
	add		eax,	[ebp+28]
	mov [ebp-52],	eax
	;calculate box_ret_to_row
	mov		eax,	[ebp+20]
	sub		eax,	[ebp+16]
	sub		eax,	1
	mul		eax,	3
	mov	[ebp-44],	eax
	;initialize filtered pixel and destination pixel
	mov		esi,	[ebp+8]
	mov		edi,	[ebp+12]
	;initialize addr_box
	mov [ebp-60],	esi
	;height-box
	mov		eax,	[ebp+24]
	sub		eax,	[ebp+16]
	mov [ebp-64],	eax
	;width-box
	mov		eax,	[ebp+20]
	sub		eax,	[ebp+16]
	mov	[ebp-68],	eax
	;pointer to 1st max canal
	mov		edx,	ebp
	sub		edx,	4
	
	while_y_f:
		;calculate iter_row
		mov		eax,	1			;eax == iter_row
		mov 	ecx,	[ebp-40]	;ecx == y_f
		mov		ebx,	[ebp+16]	;ebx == box
		cmp		ecx,	ebx
		jl	yf_is_less_1
		add		eax,	ebx
		jmp	endif_yf_1
		yf_is_less_1
		add		eax,	ecx		
		endif_yf_1
		cmp		ecx,	[ebp-64]
		jl	yf_is_less_2
		add		eax,	[ebp+24]
		sub		eax,	ecx
		sub		eax,	1
		jmp endif_yf_2
		yf_is_less_2
		add		eax,	ebx
		endif_yf_2
		mov	[ebp-28],	eax

		while_x_f:
			mov		esi,	[ebp-60]
			mov	[ebp-56],	esi
			
			;calculate iter_pxl
			mov		eax,	1			;eax == iter_pix
			mov 	ecx,	[ebp-36]	;ecx == x_f
			mov		ebx,	[ebp+16]	;ebx == box
			cmp		ecx,	ebx
			jl	xf_is_less_1
			add		eax,	ebx
			jmp	endif_xf_1
			xf_is_less_1
			add		eax,	ecx		
			endif_xf_1
			cmp		ecx,	[ebp-68]
			jl	xf_is_less_2
			add		eax,	[ebp+20]
			sub		eax,	ecx
			sub		eax,	1
			jmp endif_xf_2
			xf_is_less_2
			add		eax,	ebx
			endif_xf_2
			mov	[ebp-32],	eax
			;init while_i loop
			mov		eax,	[ebp-28]	
			mov	[ebp-16],	eax
			
			while_i:
				;init while_j loop
				mov		eax,	[ebp-32]	
				mov	[ebp-20],	eax
				while_j:
					;init while_channel
					mov 	ecx,	2
					while_channel:
						;TO-DO the actual filtering
						mov		ebx,	ecx
						shl		ebx,	2
						;now [edx-ebx] is our channel: 3-2-1, we start with the one that is the greatest on the stack
						mov		eax,	[esi]
						cmp		eax,	[edx-ebx]
						jle	lessorequalcolor
						mov	[edx-ebx],	eax
						lessorequalcolor:
						add		esi,	1
						;while_channel loop condition
						sub		ecx,	1
						cmp 	ecx,	0
						jge	while_channel
					;while_j loop condition
					sub	[ebp-20],	1
					test [ebp-20],	-1
					jnz	while_j
				mov		esi,	[ebp-56]
				add		esi,	[ebp-48]
				mov	[ebp-56],	esi
				;while_i loop condition
				sub	[ebp-16],	1
				test [ebp-16],	-1
				jnz	while_i
			;TO-DO save channels into edi, edi++ times 3
			;
			;
			;
			;
			;
			;
			;
			;
			;
			mov	[ebp-4],	0
			mov	[ebp-8],	0
			mov	[ebp-12],	0
			add	[ebp-36],	1
			mov		eax,	[ebp-36]
			cmp		eax,	[ebp+16]
			jge		endif_xf_3
			add	[ebp-60],	3
			endif_xf_3:			
			;while_x_f loop condiiton
			mov		eax,	[ebp+20]
			cmp	[ebp-36],	eax
			jne	while_x_f
		add		edi,	[ebp+28]
		add	[ebp-40],	1
		mov	[ebp-36],	0
		
		mov		eax,	[ebp-40] ;calculate box address
		cmp		eax,	[ebp+16]
		jg	greater_yt_3
		mov		ebx,	[ebp-44]
		sub	[ebp-60],	ebx
		jmp	endif_y3
		greater_yt_3:		
		mov		ebx,	[ebp-52]
		add	[ebp-60],	ebx
		endif_yf_3:

		;while_y_f loop condition
		mov		eax,	[ebp+24]
		cmp	[ebp-40],	eax
		jne	while_y_f
		
;quitting
	mov		eax,	0
quit:	
	pop		ebp
	cmp		eax,	12
	add		eax,	1
	jl		quit

	ret