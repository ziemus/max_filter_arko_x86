//ONLY VALUES IN REGISTERS ARE ADDRESED WITHOUT THE *
//ALL DATA SAVED ON THE STACK IS ADDRESED LIKE *variable to display the use of ebp + offset addressing as in [EBP+8]

//to-do changes in the algorithm:
//exchange offs_fil for incrementing source and destination so that they point to the filtered pixel
//instead of saving the offset to currently checked pixel and adding it each time we check a channes to source, save the address
//of currently checked byte (channel) in a register so that its faster to access
//the following chnages require the use of 3 general-purpose registers 
//now if we save destination pixel under EDI, filtered pixel under ESI
 //gdyby zamiast offs_curr brać esi i na początu najwyższej pętli inicjować je wartością addr_box, które się zmienia przecież co zapętlenie najwyższej pętli o 3 (lub w ogóle) 
VOIDPTR offs_fil, offs_box, offs_first, offs_curr, i, j, canal, x_f, y_f, x_c, y_c, next_row_B, width_minus_box;

*offs_fil = *offs_box = *offs_first = *offs_curr = *x_f = *y_f = *x_c = *y_c = 0;
*next_row_B = 3* *width + *padd;

while( *y_f < *width )
{
	*offs_first			=	*offs_box; 		//first in row that is
	*offs_curr			=	*offs_first;	//currently checked for max value byte
	
	*iter_pxl			=	1; //how many pixels are being checked in each row
	if( *x_f < *box )
		*iter_pxl	+=	*x_f;
	else
		*iter_pxl	+=	*box;
	if(*x_f < *width-*box)
		*iter_pxl	+=	*box;
	else
		*iter_pxl	+=	*width-*x_f-1;

	*iter_row := 1;	//how many rows the algorithm goes through in current box
	if ( *y_f < *box )
		*iter_row += *y_f;
	else
		*iter_row += *box;
	
	if (*y_f < *height-*box)
		*iter_row += *box;
	else	
		*iter_row += *height-*y_f-1;

	for(*i= *iter_row ; *i ; --*i)
	{
		for(*j = *iter_pxl ; *j ; --*j)
		{
			for(*canal=0 ; *canal < 3 ; ++*canal)
			{
				if( *(source+ *offs_curr) > *(*first_canal_max-4**canal) ) //assuming max canal values for the box are saved on stack next to each other
					*(*first_canal_max - 4* *canal) = *(source + *offs_curr);  //multiplication by 4 is equivalent to shift right by 2 bits and the second way is much faster
				*offs_curr+=1; //next byte
			}
			//offs_curr was already changed so we go automatically to the next pixel
		}
		//now we've filtered through the whole row, we shall go on to the next row
		*offs_first += *next_row_B;
		*offs_curr = *offs_first;
	}
	//now the box has been filtered through so we need to
	//save found max colors under *(dest+*offset_fil)
	//channel0 to reg, reg to [EDI], edi ++
	//channel1 to reg, reg to [EDI], EDI ++
	//channel2 ro reg, reg to [EDI], EDI ++ 
	//like that we eliminated the need for offs_fil when saving
	//can we eliminate it when filtering?
	//let's try by saving source+offs_box into 
	*x_f += 1;
	*offs_fil += 1;
	//find new _f and new box coordinates
	if(*x_f == *width) // end of line - in assebly itll be sth like: if != j to elseif_1 ; j loop_beg
	{
		*y_f += 1;
		*x_f = 0;
		*offs_fil  += *padd;
		*offs_box	= *offs_fil;	//always set when beginning to filter the 0th pixel of the next row
		//$at this point the box goes to the beginning of the next line only if: *y_f > *box AND *y_f < *height - *box
		//$else it goes to the beginning of the current line WHICH IS WHAT
		//DO I NEED TO CHANGE THIS? YUPP
	}
	else
	{
		//*offs_box doesn't change until *x_f == *box+1 
		//after and including that its value is incremented by 3 in each loop
		//up until we reach *x_f == *width - *box
		//after and including that value desn't change
		//so it only increases by 3 when (*x_f > *box) && ( *x_f < *width - *box )
		//not to subtrat that each iteration, we may store it on the stack
		if(*x_f > *box)
			//if( *x_f < *width_minus_box)
				*offs_box += 3;
		//WHAT ABOUT THE LAST/FIRST ROWS CAUSE I DODN'T THINK ABOUT THAT
	}
}
